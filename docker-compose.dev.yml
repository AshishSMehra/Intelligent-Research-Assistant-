version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: intelligent-research-qdrant-dev
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data_dev:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - intelligent-research-network-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: intelligent-research-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    command: redis-server --appendonly yes
    networks:
      - intelligent-research-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # API Service (Development)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: intelligent-research-api-dev
    ports:
      - "8008:8008"
    volumes:
      - .:/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./qdrant_storage:/app/qdrant_storage
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - JWT_SECRET=dev-secret-key-change-in-production
      - AWS_KMS_KEY_ID=
      - VAULT_URL=
      - VAULT_TOKEN=
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - intelligent-research-network-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/admin/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Worker Service (Development)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: intelligent-research-worker-dev
    volumes:
      - .:/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./qdrant_storage:/app/qdrant_storage
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - WORKER_ENV=development
      - JWT_SECRET=dev-secret-key-change-in-production
      - AWS_KMS_KEY_ID=
      - VAULT_URL=
      - VAULT_TOKEN=
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - intelligent-research-network-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "python", "|", "grep", "worker.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development Tools
  # Qdrant Web UI
  qdrant-web:
    image: qdrant/qdrant-web:latest
    container_name: intelligent-research-qdrant-web-dev
    ports:
      - "8080:80"
    environment:
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      - qdrant
    networks:
      - intelligent-research-network-dev
    restart: unless-stopped

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: intelligent-research-redis-commander-dev
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - intelligent-research-network-dev
    restart: unless-stopped

volumes:
  qdrant_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  intelligent-research-network-dev:
    driver: bridge 