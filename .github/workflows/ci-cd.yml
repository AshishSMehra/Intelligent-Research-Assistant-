name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # LINTING AND CODE QUALITY
  # =============================================================================
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint bandit safety
        
    - name: Run linting checks
      run: |
        echo "Running flake8..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
        echo "Running black check..."
        black --check --diff .
        
        echo "Running isort check..."
        isort --check-only --diff .
        
        echo "Running mypy..."
        mypy src/ --ignore-missing-imports
        
    - name: Run security checks
      run: |
        echo "Running bandit security scan..."
        bandit -r src/ -f json -o bandit-report.json || true
        
        echo "Running safety check..."
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # =============================================================================
  # UNIT TESTS
  # =============================================================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio
        
    - name: Create test directories
      run: |
        mkdir -p uploads logs qdrant_storage
        
    - name: Run unit tests
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        FLASK_ENV: testing
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: Create test directories
      run: |
        mkdir -p uploads logs qdrant_storage
        
    - name: Run integration tests
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        FLASK_ENV: testing
      run: |
        # Start the application in background
        python app.py &
        APP_PID=$!
        
        # Wait for application to start
        sleep 30
        
        # Run integration tests
        pytest tests/integration/ -v || true
        
        # Stop the application
        kill $APP_PID || true

  # =============================================================================
  # DOCKER BUILD AND PUSH
  # =============================================================================
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.worker
        push: true
        tags: ${{ steps.meta.outputs.tags }}-worker
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # DOCKER COMPOSE TEST
  # =============================================================================
  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        QDRANT_HOST=qdrant
        QDRANT_PORT=6333
        REDIS_URL=redis://redis:6379
        JWT_SECRET=test-secret-key
        FLASK_ENV=testing
        EOF
        
    - name: Test Docker Compose setup
      run: |
        # Start services
        docker-compose -f docker-compose.dev.yml up -d
        
        # Wait for services to be ready
        sleep 60
        
        # Test API health
        curl -f http://localhost:8008/admin/health || exit 1
        
        # Test Qdrant health
        curl -f http://localhost:6333/health || exit 1
        
        # Test Redis health
        docker exec intelligent-research-redis-dev redis-cli ping || exit 1
        
        # Stop services
        docker-compose -f docker-compose.dev.yml down

  # =============================================================================
  # SECURITY SCAN
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Upload Trivy results as artifact (fallback)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results-${{ github.run_number }}
        path: trivy-results.sarif
        retention-days: 30

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-compose-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply, docker-compose, etc.
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test logic here
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "Staging deployment completed"

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-compose-test, security-scan]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply, docker-compose, etc.
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check logic here
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "Production deployment completed"

  # =============================================================================
  # PERFORMANCE TESTS
  # =============================================================================
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust
        
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add performance test logic here using Locust or similar

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, performance-test]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ CI/CD Pipeline failed!"
        # Add notification logic here (Slack, email, etc.) 