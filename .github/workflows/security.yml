name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # =============================================================================
  # DEPENDENCY VULNERABILITY SCAN
  # =============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run Safety check
      run: |
        echo "Checking for known vulnerabilities in dependencies..."
        safety check --json --output safety-report.json || true
        
    - name: Run Bandit security scan
      run: |
        echo "Running Bandit security scan..."
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30

  # =============================================================================
  # CONTAINER VULNERABILITY SCAN
  # =============================================================================
  container-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t intelligent-research-api:test .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'intelligent-research-api:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Upload Trivy results as artifact (fallback)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results-${{ github.run_number }}
        path: trivy-results.sarif
        retention-days: 30

  # =============================================================================
  # SECRET SCAN
  # =============================================================================
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run TruffleHog secret scanner
      uses: trufflesecurity/trufflehog@main
      with:
        args: --only-verified --format json --output trufflehog-results.json
        path: .
        
    - name: Upload secret scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-scan-results-${{ github.run_number }}
        path: trufflehog-results.json
        retention-days: 30

  # =============================================================================
  # CODE QUALITY AND SECURITY
  # =============================================================================
  code-quality:
    name: Code Quality and Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint semgrep
        
    - name: Run Pylint
      run: |
        echo "Running Pylint..."
        pylint src/ --output-format=json --reports=y > pylint-report.json || true
        
    - name: Run Semgrep
      run: |
        echo "Running Semgrep..."
        semgrep ci --json --output semgrep-report.json || true
        
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports-${{ github.run_number }}
        path: |
          pylint-report.json
          semgrep-report.json
        retention-days: 30

  # =============================================================================
  # LICENSE COMPLIANCE
  # =============================================================================
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        
    - name: Generate license report
      run: |
        echo "Generating license compliance report..."
        pip-licenses --format=json --output-file license-report.json
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report-${{ github.run_number }}
        path: license-report.json
        retention-days: 30

  # =============================================================================
  # SECURITY NOTIFICATIONS
  # =============================================================================
  security-notify:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, secret-scan, code-quality, license-compliance]
    if: always()
    
    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v4
      with:
        path: security-reports
        
    - name: Generate security summary
      run: |
        echo "Generating security scan summary..."
        echo "## Security Scan Summary" > security-summary.md
        echo "Date: $(date)" >> security-summary.md
        echo "Repository: ${{ github.repository }}" >> security-summary.md
        echo "Branch: ${{ github.ref }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Count vulnerabilities if reports exist
        if [ -f "security-reports/safety-report.json" ]; then
          echo "### Dependency Vulnerabilities" >> security-summary.md
          echo "Safety check completed" >> security-summary.md
        fi
        
        if [ -f "security-reports/bandit-report.json" ]; then
          echo "### Code Security Issues" >> security-summary.md
          echo "Bandit scan completed" >> security-summary.md
        fi
        
        if [ -f "security-reports/trufflehog-results.json" ]; then
          echo "### Secret Detection" >> security-summary.md
          echo "TruffleHog scan completed" >> security-summary.md
        fi
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-${{ github.run_number }}
        path: security-summary.md
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          }); 